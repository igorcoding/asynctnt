:py:mod:`asynctnt.iproto.protocol`
==================================

.. py:module:: asynctnt.iproto.protocol


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   asynctnt.iproto.protocol.Field
   asynctnt.iproto.protocol.Metadata
   asynctnt.iproto.protocol.SchemaIndex
   asynctnt.iproto.protocol.SchemaSpace
   asynctnt.iproto.protocol.Schema
   asynctnt.iproto.protocol.TarantoolTuple
   asynctnt.iproto.protocol.IProtoErrorStackFrame
   asynctnt.iproto.protocol.IProtoError
   asynctnt.iproto.protocol.Response
   asynctnt.iproto.protocol.PushIterator
   asynctnt.iproto.protocol.Db
   asynctnt.iproto.protocol.Protocol




Attributes
~~~~~~~~~~

.. autoapisummary::

   asynctnt.iproto.protocol.BodyItem


.. py:class:: Field


   .. py:attribute:: name
      :type: Optional[str]

      Field name 


   .. py:attribute:: type
      :type: Optional[str]

      Field type 


   .. py:attribute:: collation
      :type: Optional[str]

      Field collation value 


   .. py:attribute:: is_nullable
      :type: Optional[bool]

      If field may be null 


   .. py:attribute:: is_autoincrement
      :type: Optional[bool]

      Is Autoincrement 


   .. py:attribute:: span
      :type: Optional[str]

      


.. py:class:: Metadata


   .. py:attribute:: fields
      :type: List[Field]

      List of fields 


   .. py:attribute:: name_id_map
      :type: Dict[str, int]

      Mapping name -> id 



.. py:class:: SchemaIndex


   .. py:attribute:: iid
      :type: int

      Index id 


   .. py:attribute:: sid
      :type: int

      Space id 


   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: index_type
      :type: Optional[str]

      

   .. py:attribute:: unique
      :type: Optional[bool]

      

   .. py:attribute:: metadata
      :type: Optional[Metadata]

      


.. py:class:: SchemaSpace


   .. py:attribute:: sid
      :type: int

      

   .. py:attribute:: owner
      :type: int

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: engine
      :type: Optional[str]

      

   .. py:attribute:: field_count
      :type: int

      

   .. py:attribute:: flags
      :type: Optional[Any]

      

   .. py:attribute:: metadata
      :type: Optional[Metadata]

      

   .. py:attribute:: indexes
      :type: Dict[Union[int, str], SchemaIndex]

      


.. py:class:: Schema


   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: spaces
      :type: Dict[Union[str, int], SchemaSpace]

      


.. py:class:: TarantoolTuple


   .. py:method:: __repr__() -> str

      Return repr(self).


   .. py:method:: __index__(i: int) -> Any


   .. py:method:: __len__() -> int


   .. py:method:: __contains__(item: str) -> bool


   .. py:method:: __getitem__(item: Union[int, str, slice]) -> Any


   .. py:method:: keys() -> Iterator[str]


   .. py:method:: values() -> Iterator[Any]


   .. py:method:: items() -> Iterator[Tuple[str, Any]]


   .. py:method:: get(item: str) -> Optional[Any]


   .. py:method:: __iter__()


   .. py:method:: __next__()



.. py:class:: IProtoErrorStackFrame


   .. py:attribute:: error_type
      :type: str

      

   .. py:attribute:: file
      :type: str

      

   .. py:attribute:: line
      :type: int

      

   .. py:attribute:: message
      :type: str

      

   .. py:attribute:: err_no
      :type: int

      

   .. py:attribute:: code
      :type: int

      

   .. py:attribute:: fields
      :type: Dict[str, Any]

      


.. py:class:: IProtoError


   .. py:attribute:: trace
      :type: List[IProtoErrorStackFrame]

      


.. py:data:: BodyItem

   

.. py:class:: Response


   .. py:property:: sync
      :type: int


   .. py:property:: code
      :type: int


   .. py:property:: return_code
      :type: int


   .. py:property:: schema_id
      :type: int


   .. py:property:: stmt_id
      :type: int


   .. py:property:: rowcount
      :type: int


   .. py:attribute:: errmsg
      :type: Optional[str]

      

   .. py:attribute:: error
      :type: Optional[IProtoError]

      

   .. py:attribute:: encoding
      :type: bytes

      

   .. py:attribute:: autoincrement_ids
      :type: Optional[List[int]]

      

   .. py:attribute:: body
      :type: Optional[List[BodyItem]]

      

   .. py:attribute:: metadata
      :type: Optional[Metadata]

      

   .. py:attribute:: params
      :type: Optional[Metadata]

      

   .. py:attribute:: params_count
      :type: int

      

   .. py:method:: done() -> bool


   .. py:method:: __len__() -> int


   .. py:method:: __getitem__(i) -> BodyItem


   .. py:method:: __iter__()



.. py:class:: PushIterator(fut: asyncio.Future)


   .. py:property:: response
      :type: Response


   .. py:method:: __iter__()


   .. py:method:: __next__()


   .. py:method:: __aiter__()


   .. py:method:: __anext__()
      :async:



.. py:class:: Db


   .. py:property:: stream_id
      :type: int


   .. py:method:: set_stream_id(stream_id: int)


   .. py:method:: ping(timeout: float = -1)


   .. py:method:: call16(func_name: str, args=None, timeout: float = -1, push_subscribe: bool = False)


   .. py:method:: call(func_name: str, args=None, timeout: float = -1, push_subscribe: bool = False)


   .. py:method:: eval(expression: str, args=None, timeout: float = -1, push_subscribe: bool = False)


   .. py:method:: select(space, key=None, offset: int = 0, limit: int = 4294967295, index=0, iterator=0, timeout: float = -1, check_schema_change: bool = True)


   .. py:method:: insert(space, t, replace: bool = False, timeout: float = -1)


   .. py:method:: replace(space, t, timeout: float = -1)


   .. py:method:: delete(space, key, index=0, timeout: float = -1)


   .. py:method:: update(space, key, operations, index=0, timeout: float = -1)


   .. py:method:: upsert(space, t, operations, timeout: float = -1)


   .. py:method:: execute(query, args, parse_metadata: bool = True, timeout: float = -1)


   .. py:method:: prepare(query, parse_metadata: bool = True, timeout: float = -1)


   .. py:method:: begin(isolation: int, tx_timeout: float, timeout: float = -1)


   .. py:method:: commit(timeout: float = -1)


   .. py:method:: rollback(timeout: float = -1)



.. py:class:: Protocol


   .. py:property:: schema_id
      :type: int


   .. py:property:: schema
      :type: Schema


   .. py:method:: create_db(gen_stream_id: bool = False) -> Db


   .. py:method:: get_common_db() -> Db


   .. py:method:: refetch_schema() -> asyncio.Future


   .. py:method:: is_connected() -> bool


   .. py:method:: is_fully_connected() -> bool


   .. py:method:: get_version() -> tuple



