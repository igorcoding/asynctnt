:py:mod:`asynctnt.instance`
===========================

.. py:module:: asynctnt.instance


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   asynctnt.instance.TarantoolInstanceProtocol
   asynctnt.instance.TarantoolInstance
   asynctnt.instance.TarantoolSyncInstance
   asynctnt.instance.TarantoolAsyncInstance
   asynctnt.instance.TarantoolSyncDockerInstance




.. py:class:: TarantoolInstanceProtocol(tnt, on_exit)

   Bases: :py:obj:`asyncio.SubprocessProtocol`

   Interface for protocol for subprocess calls.

   .. py:method:: logger()
      :property:


   .. py:method:: pid()
      :property:


   .. py:method:: connection_made(transport)

      Called when a connection is made.

      The argument is the transport representing the pipe connection.
      To receive data, wait for data_received() calls.
      When the connection is closed, connection_lost() is called.


   .. py:method:: pipe_data_received(fd, data)

      Called when the subprocess writes data into stdout/stderr pipe.

      fd is int file descriptor.
      data is bytes object.


   .. py:method:: process_exited()

      Called when subprocess has exited.


   .. py:method:: returncode()
      :property:


   .. py:method:: wait()
      :async:

      Wait until the process exit and return the process return code.

      This method is a coroutine.


   .. py:method:: send_signal(signal)


   .. py:method:: terminate()


   .. py:method:: kill()



.. py:class:: TarantoolInstance(*, host='127.0.0.1', port=3301, console_host=None, console_port=3302, replication_source=None, title=None, logger=None, log_level=5, slab_alloc_arena=0.1, wal_mode='none', root=None, specify_work_dir=True, cleanup=True, initlua_template=None, applua='-- app.lua --', extra_box_cfg='', timeout=5.0, command_to_run='tarantool', command_args=None)

   .. py:method:: replication_source()
      :property:


   .. py:method:: _random_string(length, *, source=string.ascii_uppercase + string.ascii_lowercase + string.digits)


   .. py:method:: _generate_title()


   .. py:method:: _generate_root_folder_name()


   .. py:method:: get_random_port()
      :staticmethod:


   .. py:method:: _create_initlua_template()


   .. py:method:: _render_initlua()


   .. py:method:: _save_initlua(initlua)


   .. py:method:: logger()
      :property:


   .. py:method:: fingerprint()
      :property:


   .. py:method:: prepare(recreate)


   .. py:method:: host()
      :property:


   .. py:method:: port()
      :property:


   .. py:method:: console_port()
      :property:


   .. py:method:: is_running()
      :property:


   .. py:method:: pid()
      :property:


   .. py:method:: command(cmd, print_greeting=True)
      :abstractmethod:


   .. py:method:: start(*, wait=True, recreate=True)
      :abstractmethod:


   .. py:method:: stop()
      :abstractmethod:


   .. py:method:: terminate()
      :abstractmethod:


   .. py:method:: kill()
      :abstractmethod:


   .. py:method:: cleanup()



.. py:class:: TarantoolSyncInstance(**kwargs)

   Bases: :py:obj:`TarantoolInstance`

   .. py:attribute:: WAIT_TIMEOUT
      :annotation: = 5

      

   .. py:method:: __enter__()


   .. py:method:: __exit__(exc_type, exc_val, exc_tb)


   .. py:method:: pid()
      :property:


   .. py:method:: start(*, wait=True, recreate=True)


   .. py:method:: _log_reader()


   .. py:method:: stop()


   .. py:method:: terminate()


   .. py:method:: kill()


   .. py:method:: _wait(timeout, wait=True)


   .. py:method:: cleanup()


   .. py:method:: _parse_version(version: str) -> Optional[tuple]
      :staticmethod:


   .. py:method:: version() -> Optional[tuple]


   .. py:method:: bin_version() -> Optional[tuple]
      :property:


   .. py:method:: command(cmd, print_greeting=True)



.. py:class:: TarantoolAsyncInstance(**kwargs)

   Bases: :py:obj:`TarantoolInstance`

   .. py:method:: pid()
      :property:


   .. py:method:: prepare(recreate)


   .. py:method:: _on_process_exit(return_code)


   .. py:method:: wait_stopped()
      :async:


   .. py:method:: version()
      :async:


   .. py:method:: command(cmd, print_greeting=True)
      :async:


   .. py:method:: start(*, wait=True, recreate=True)
      :async:


   .. py:method:: stop()
      :async:


   .. py:method:: terminate()


   .. py:method:: kill()


   .. py:method:: cleanup()



.. py:class:: TarantoolSyncDockerInstance(*, docker_image=None, docker_tag=None, host='0.0.0.0', port=3301, console_host=None, console_port=3302, replication_source=None, title=None, logger=None, log_level=5, slab_alloc_arena=0.1, wal_mode='none', initlua_template=None, applua='-- app.lua --', timeout=10.0)

   Bases: :py:obj:`TarantoolSyncInstance`

   .. py:method:: bin_version() -> Optional[tuple]
      :property:



